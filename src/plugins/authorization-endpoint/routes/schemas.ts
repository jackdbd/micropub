import { Static, Type } from '@sinclair/typebox'
import { client_id, issuer, me, profile } from '../../../lib/indieauth/index.js'
import {
  authorization_code,
  grant_type,
  redirect_uri,
  response_type,
  scope,
  state
} from '../../../lib/oauth2/index.js'
import {
  code_challenge,
  code_challenge_method,
  code_verifier
} from '../../../lib/pkce/index.js'

/**
 * The client constructs the request URI by adding the following parameters to
 * the query component of the authorization endpoint URI using the
 * "application/x-www-form-urlencoded" format.
 *
 * @see [Authorization Request - The OAuth 2.0 Authorization Framework (RFC 6749)](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1)
 * @see [Authorization Request - IndieAuth](https://indieauth.spec.indieweb.org/#authorization-request)
 */
export const authorization_request_querystring = Type.Object({
  client_id,
  code_challenge,
  code_challenge_method,
  /**
   * Either the string that the user entered, or the value after applying URL
   * Canonicalization.
   */
  me: Type.Union([me, Type.String({ minLength: 1 })]),
  /**
   * The redirect URL indicating where the user should be redirected to after
   * approving the request.
   */
  redirect_uri,
  /**
   * The value MUST be one of "code" for requesting an authorization code.
   */
  response_type: { ...response_type, default: 'code' },
  scope: Type.Optional(scope),
  state
})

export type AuthorizationRequestQuerystring = Static<
  typeof authorization_request_querystring
>

/**
 * Access token request body.
 *
 * @see [Redeeming the Authorization Code - IndieAuth](https://indieauth.spec.indieweb.org/#redeeming-the-authorization-code)
 * @see [Access Token Request - The OAuth 2.0 Authorization Framework (RFC 6749)](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3)
 */
export const access_token_request_body = Type.Object({
  client_id,
  code: authorization_code,
  code_verifier,
  grant_type: { ...grant_type, default: 'authorization_code' },
  redirect_uri
})

export type AccessTokenRequestBody = Static<typeof access_token_request_body>

/**
 * Response body returned by the authorization endpoint when the user approves
 * the request.
 *
 * If the client only needs to know the user who logged in, the client will
 * exchange the authorization code at the authorization endpoint, and only
 * the canonical user profile URL and possibly profile information is returned.
 *
 * @see [Profile URL Response - IndieAuth](https://indieauth.spec.indieweb.org/#profile-url-response)
 */
export const authorization_response_body_success = Type.Object({
  me,
  profile: Type.Optional(profile),
  scope: Type.Optional(scope)
})

export type AuthorizationResponseBodySuccess = Static<
  typeof authorization_response_body_success
>

/**
 * The user can approve or deny the request by clicking two buttons in the
 * authorization form.
 */
const action = Type.Union([Type.Literal('approve'), Type.Literal('deny')])

export type Action = Static<typeof action>

/**
 * Querystring built by the authorization endpoint.
 *
 * @see [Authorization Response - IndieAuth](https://indieauth.spec.indieweb.org/#authorization-response)
 */
export const authorization_response_querystring = Type.Object(
  {
    /**
     * Authorization code generated by this authorization endpoint.
     */
    code: authorization_code,

    /**
     * Issuer identifier of this authorization endpoint.
     */
    iss: Type.Optional(issuer),

    /**
     * Parameter 'state' set by the client in the request. It MUST be set to the
     * exact value that the client set in the request.
     */
    state
  },
  {
    $id: 'authorization-response-querystring',
    description: `Querystring built by the authorization endpoint. If the user approves the request, the authorization endpoint generates an authorization code and builds the redirect back to the client.`
  }
)

export type AuthorizationResponseQuerystring = Static<
  typeof authorization_response_querystring
>

export const consent_request_querystring = Type.Object({
  action,
  client_id,
  me: Type.Union([me, Type.String({ minLength: 1 })]),
  redirect_uri,
  scope,
  state
})

export type ConsentRequestQuerystring = Static<
  typeof consent_request_querystring
>
