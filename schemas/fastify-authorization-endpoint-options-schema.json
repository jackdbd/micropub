{
  "$id": "fastify-authorization-endpoint-options",
  "description": "Options for the Fastify authorization-endpoint plugin",
  "title": "Authorization Endpoint Options",
  "type": "object",
  "properties": {
    "ajv": {
      "description": "Instance of Ajv"
    },
    "authorizationCodeExpiration": {
      "default": "5 minutes",
      "minLength": 1,
      "type": "string"
    },
    "includeErrorDescription": {
      "description": "Whether to include an\n`error_description` property in all error responses.\nThis is meant to assist the client developer in understanding the error.\nThis is NOT meant to be shown to the end user.",
      "type": "boolean",
      "default": false
    },
    "issuer": {
      "description": "The authorization server's issuer identifier. It's a URL that uses the \"https\" scheme and has no query or fragment components. It MUST also be a prefix of the indieauth-metadata URL.",
      "format": "uri",
      "title": "Issuer",
      "type": "string"
    },
    "logPrefix": {
      "default": "authorization-endpoint ",
      "type": "string"
    },
    "onAuthorizationCodeVerified": {
      "title": "onAuthorizationCodeVerified",
      "description": "Handler that runs after the authorization code has been verified. You should use this handler to inform your storage backend that the authorization code has been used.",
      "type": "Function",
      "parameters": [
        {
          "minLength": 1,
          "description": "The authorization code generated by the authorization endpoint. The code MUST expire shortly after it is issued to mitigate the risk of leaks, and MUST be valid for only one use. A maximum lifetime of 10 minutes is recommended. See [Authorization Response](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2).",
          "type": "string"
        }
      ],
      "returns": {
        "type": "Promise",
        "item": {
          "type": "void"
        }
      }
    },
    "onUserApprovedRequest": {
      "title": "onUserApprovedRequest",
      "description": "Handler executed after the user approves the authorization request on the consent screen. You should use it to persist the authorization code generated by the authorization code generated by the authorization endpoint into your storage backend.",
      "type": "Function",
      "parameters": [
        {
          "$id": "authorization-code-props",
          "additionalProperties": false,
          "title": "Authorization Code Props",
          "description": "Properties of an Authorization Code (a storage implementation may have addition properties)",
          "type": "object",
          "properties": {
            "client_id": {
              "description": "The ID of the application that asks for authorization. An IndieAuth client ID is a URL.",
              "format": "uri",
              "type": "string"
            },
            "code": {
              "minLength": 10,
              "maxLength": 128,
              "description": "Authorization code issued by the authorization endpoint. It should be a single-use, unguessable, random string.",
              "type": "string"
            },
            "code_challenge": {
              "$id": "pkce-code-challenge",
              "description": "The PKCE code challenge. See [Client Creates the Code Challenge](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).",
              "minLength": 43,
              "maxLength": 128,
              "title": "PKCE code challenge",
              "type": "string"
            },
            "code_challenge_method": {
              "$id": "pkce-code-challenge-method",
              "description": "The hashing method used to calculate the code challenge in the PKCE OAuth 2.0 flow. See [Client Creates the Code Challenge](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).",
              "title": "PKCE code challenge method",
              "anyOf": [
                {
                  "const": "plain",
                  "type": "string"
                },
                {
                  "const": "S256",
                  "type": "string"
                }
              ]
            },
            "exp": {
              "description": "UNIX timestamp when the JWT expires",
              "minimum": 0,
              "title": "\"exp\" (Expiration Time) Claim",
              "type": "number"
            },
            "iss": {
              "description": "Token issuer",
              "minLength": 1,
              "title": "\"iss\" (Issuer) Claim",
              "type": "string"
            },
            "me": {
              "description": "Profile URL (after URL Canonicalization)",
              "format": "uri",
              "title": "me (canonicalized)",
              "type": "string"
            },
            "redirect_uri": {
              "description": "Holds a URL. A successful response from this endpoint results in a redirect to this URL.",
              "format": "uri",
              "type": "string"
            },
            "scope": {
              "description": "Scope values. See [RFC8693 scope claim](https://www.rfc-editor.org/rfc/rfc8693.html#name-scope-scopes-claim)",
              "minLength": 1,
              "title": "OAuth 2.0 scope (scopes) claim",
              "type": "string"
            },
            "used": {
              "type": "boolean"
            }
          },
          "required": [
            "client_id",
            "code",
            "code_challenge",
            "code_challenge_method",
            "exp",
            "me",
            "redirect_uri",
            "scope"
          ]
        }
      ],
      "returns": {
        "type": "Promise",
        "item": {
          "type": "void"
        }
      }
    },
    "reportAllAjvErrors": {
      "description": "Whether to report all AJV validation errors.",
      "title": "report all AJV errors",
      "type": "boolean",
      "default": false
    },
    "retrieveAuthorizationCode": {
      "title": "retrieveAuthorizationCode",
      "description": "Function that retrieves an authorization code from a storage backend.",
      "type": "Function",
      "parameters": [
        {
          "minLength": 1,
          "description": "The authorization code generated by the authorization endpoint. The code MUST expire shortly after it is issued to mitigate the risk of leaks, and MUST be valid for only one use. A maximum lifetime of 10 minutes is recommended. See [Authorization Response](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2).",
          "type": "string"
        }
      ],
      "returns": {
        "type": "Promise",
        "item": {
          "anyOf": [
            {
              "$id": "authorization-code-immutable-record",
              "additionalProperties": false,
              "description": "Represents a record of an authorization code. The values of\n    this record should never change. Any updates to the underlying entity should \n    create a new record.",
              "title": "Authorization Code Immutable Record",
              "type": "object",
              "properties": {
                "created_at": {
                  "minimum": 1,
                  "description": "Timestamp in milliseconds since UNIX epoch",
                  "type": "number"
                },
                "id": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "type": "number"
                    },
                    {
                      "minLength": 1,
                      "type": "string"
                    }
                  ]
                },
                "client_id": {
                  "description": "The ID of the application that asks for authorization. An IndieAuth client ID is a URL.",
                  "format": "uri",
                  "type": "string"
                },
                "code": {
                  "minLength": 10,
                  "maxLength": 128,
                  "description": "Authorization code issued by the authorization endpoint. It should be a single-use, unguessable, random string.",
                  "type": "string"
                },
                "code_challenge": {
                  "$id": "pkce-code-challenge",
                  "description": "The PKCE code challenge. See [Client Creates the Code Challenge](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).",
                  "minLength": 43,
                  "maxLength": 128,
                  "title": "PKCE code challenge",
                  "type": "string"
                },
                "code_challenge_method": {
                  "$id": "pkce-code-challenge-method",
                  "description": "The hashing method used to calculate the code challenge in the PKCE OAuth 2.0 flow. See [Client Creates the Code Challenge](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).",
                  "title": "PKCE code challenge method",
                  "anyOf": [
                    {
                      "const": "plain",
                      "type": "string"
                    },
                    {
                      "const": "S256",
                      "type": "string"
                    }
                  ]
                },
                "exp": {
                  "description": "UNIX timestamp when the JWT expires",
                  "minimum": 0,
                  "title": "\"exp\" (Expiration Time) Claim",
                  "type": "number"
                },
                "iss": {
                  "description": "Token issuer",
                  "minLength": 1,
                  "title": "\"iss\" (Issuer) Claim",
                  "type": "string"
                },
                "me": {
                  "description": "Profile URL (after URL Canonicalization)",
                  "format": "uri",
                  "title": "me (canonicalized)",
                  "type": "string"
                },
                "redirect_uri": {
                  "description": "Holds a URL. A successful response from this endpoint results in a redirect to this URL.",
                  "format": "uri",
                  "type": "string"
                },
                "scope": {
                  "description": "Scope values. See [RFC8693 scope claim](https://www.rfc-editor.org/rfc/rfc8693.html#name-scope-scopes-claim)",
                  "minLength": 1,
                  "title": "OAuth 2.0 scope (scopes) claim",
                  "type": "string"
                },
                "used": {
                  "type": "boolean"
                }
              },
              "required": [
                "created_at",
                "id",
                "client_id",
                "code",
                "code_challenge",
                "code_challenge_method",
                "exp",
                "me",
                "redirect_uri",
                "scope"
              ]
            },
            {
              "$id": "authorization-code-mutable-record",
              "additionalProperties": false,
              "description": "Represents a record of an authorization code with a predefined\n    set of properties (columns). While the structure of the record remains \n    consistent, the values of these properties may change over time.",
              "title": "Authorization Code Mutable Record",
              "type": "object",
              "properties": {
                "created_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "deleted_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "undeleted_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "updated_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "client_id": {
                  "description": "The ID of the application that asks for authorization. An IndieAuth client ID is a URL.",
                  "format": "uri",
                  "type": "string"
                },
                "code": {
                  "minLength": 10,
                  "maxLength": 128,
                  "description": "Authorization code issued by the authorization endpoint. It should be a single-use, unguessable, random string.",
                  "type": "string"
                },
                "code_challenge": {
                  "$id": "pkce-code-challenge",
                  "description": "The PKCE code challenge. See [Client Creates the Code Challenge](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).",
                  "minLength": 43,
                  "maxLength": 128,
                  "title": "PKCE code challenge",
                  "type": "string"
                },
                "code_challenge_method": {
                  "$id": "pkce-code-challenge-method",
                  "description": "The hashing method used to calculate the code challenge in the PKCE OAuth 2.0 flow. See [Client Creates the Code Challenge](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).",
                  "title": "PKCE code challenge method",
                  "anyOf": [
                    {
                      "const": "plain",
                      "type": "string"
                    },
                    {
                      "const": "S256",
                      "type": "string"
                    }
                  ]
                },
                "exp": {
                  "description": "UNIX timestamp when the JWT expires",
                  "minimum": 0,
                  "title": "\"exp\" (Expiration Time) Claim",
                  "type": "number"
                },
                "iss": {
                  "description": "Token issuer",
                  "minLength": 1,
                  "title": "\"iss\" (Issuer) Claim",
                  "type": "string"
                },
                "me": {
                  "description": "Profile URL (after URL Canonicalization)",
                  "format": "uri",
                  "title": "me (canonicalized)",
                  "type": "string"
                },
                "redirect_uri": {
                  "description": "Holds a URL. A successful response from this endpoint results in a redirect to this URL.",
                  "format": "uri",
                  "type": "string"
                },
                "scope": {
                  "description": "Scope values. See [RFC8693 scope claim](https://www.rfc-editor.org/rfc/rfc8693.html#name-scope-scopes-claim)",
                  "minLength": 1,
                  "title": "OAuth 2.0 scope (scopes) claim",
                  "type": "string"
                },
                "used": {
                  "type": "boolean"
                }
              },
              "required": [
                "created_at",
                "client_id",
                "code",
                "code_challenge",
                "code_challenge_method",
                "exp",
                "me",
                "redirect_uri",
                "scope"
              ]
            }
          ]
        }
      }
    }
  },
  "required": [
    "authorizationCodeExpiration",
    "onAuthorizationCodeVerified",
    "onUserApprovedRequest",
    "retrieveAuthorizationCode"
  ]
}